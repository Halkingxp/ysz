/*****************************************************************************
Copyright (C), 2012. ^^^^^^^^. Co., Ltd.
文 件 名:  Thread.cpp
作    者:   
版    本:  1.0
完成日期:  2012-8-14
说明信息:  跨平台的线程基类
*****************************************************************************/
#include "Thread.h"

#ifndef WIN32
#include <unistd.h>
#endif


//********************************************************************
//函数功能: 构造函数
//第一参数: [IN] 线程执行类的派生对象指针
//返回说明: 
//备注说明: 
//********************************************************************
CThread::CThread(void) : m_isRun(true)
{
}

//********************************************************************
//函数功能: 析构函数
//第一参数: 
//返回说明: 
//备注说明: 
//********************************************************************
CThread::~CThread(void)
{
}

//********************************************************************
//函数功能: 创建并启动线程
//第一参数: 
//返回说明: true  线程启动成功
//返回说明: false 线程启动失败
//备注说明: 失败原因1. 执行对象为空指针
//备注说明: 失败原因2. 重复启动线程
//备注说明: 失败原因3. 创建线程失败
//********************************************************************
void CThread::Start()
{
	m_cThread = std::thread(_ThreadTask, this);
}

//********************************************************************
//函数功能: 终止线程
//第一参数: 
//返回说明: true  终止线程成功
//返回说明: 
//备注说明: 
//********************************************************************
void CThread::Detach(void)
{
	m_isRun = false;
	m_cThread.detach();
}

//********************************************************************
//函数功能: 阻塞并等待线程退出
//第一参数: 
//返回说明: true  线程退出成功
//返回说明: false 线程退出失败
//备注说明: 失败原因1. 线程未创建成功
//备注说明: 失败原因2. 线程等待失败
//********************************************************************
bool CThread::Stop(void)
{
	if (!m_cThread.joinable())
	{
		return false;
	}

	m_cThread.join();
	return true;
}


//********************************************************************
//函数功能: 线程休眠
//第一参数: [IN] 休眠时长 (单位毫秒)
//返回说明: 
//备注说明: 
//********************************************************************
void CThread::Sleep(uint32_t nMilliseconds)
{
#if defined WIN32
	std::this_thread::sleep_for(std::chrono::milliseconds(nMilliseconds));
#else
	usleep(nMilliseconds * 1000);
#endif
}


//********************************************************************
//函数功能: 线程启动执行函数
//第一参数: [IN] 线程创建时, 传入的参数
//返回说明: 默认返回0
//备注说明: 
//********************************************************************
void CThread::_ThreadTask(void *pParam)
{
	CThread *pThread = (CThread *)(pParam);
	if (pThread != NULL)
	{
		pThread->Run();
	}
	return;
}

//********************************************************************
//函数功能: 线程执行标志
//第一参数:
//返回说明: 返回true  执行中
//返回说明: 返回false 停止执行
//备注说明: 
//********************************************************************
bool CThread::IsRun(void)
{
	return m_isRun;
}
